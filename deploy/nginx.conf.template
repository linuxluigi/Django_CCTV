events {
    worker_connections  1024;
}


http {
    include       mime.types;
    tcp_nopush on;
    directio 512;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream %(proj_name)s {
        server unix:%(proj_path)s/gunicorn.sock fail_timeout=0;
    }

    server {

        listen 80;
        %(ssl_disabled)s listen 443 ssl;
        server_name %(domains_nginx)s;
        client_max_body_size 10M;
        keepalive_timeout    15;
        error_log /home/%(user)s/logs/%(proj_name)s_error_nginx.log info;

        %(ssl_disabled)s ssl_certificate      %(proj_name)s.crt;
        %(ssl_disabled)s ssl_certificate_key  %(proj_name)s.key;
        %(ssl_disabled)s ssl_session_cache    shared:SSL:10m;
        %(ssl_disabled)s ssl_session_timeout  10m;
        %(ssl_disabled)s ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
        %(ssl_disabled)s ssl_prefer_server_ciphers on;
        %(ssl_disabled)s ssl_protocols TLSv1.2 TLSv1.1 TLSv1;

        # force ssl
        if ($server_port = 80) {
            rewrite (.*) https://$http_host$1 permanent;
        }

        # Deny illegal Host headers
        if ($host !~* ^(%(domains_regex)s)$) {
            return 444;
        }

        location / {
            proxy_redirect      off;
            proxy_set_header    Host                    $host;
            proxy_set_header    X-Real-IP               $remote_addr;
            proxy_set_header    X-Forwarded-For         $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Protocol    $scheme;
            proxy_pass          http://%(proj_name)s;
        }

        location /static/ {
            root            %(proj_path)s;
            access_log      off;
            log_not_found   off;
            expires 30d;
        }

        location /robots.txt {
            root            %(proj_path)s/static;
            access_log      off;
            log_not_found   off;
        }

        location /favicon.ico {
            root            %(proj_path)s/static/img;
            access_log      off;
            log_not_found   off;
        }

        # Serve HLS keys securely here
        location /keys {
            # Disable cache
            add_header 'Cache-Control' 'no-cache';

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            root /srv/nginx;
        }

        location /stream {
            # Basic Auth
            auth_basic "Restricted";                                #For Basic Auth
            auth_basic_user_file /usr/local/nginx/conf/.htpasswd;   #For Basic Auth

            # Disable cache
            add_header 'Cache-Control' 'no-cache';

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            types {
                application/dash+xml mpd;
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }

            # root path
            root /srv/nginx/;
        }

    }

}

rtmp {

    server {

        listen 1935; # Listen on standard RTMP port
        chunk_size 4000;

        # TV mode: one publisher, many subscribers
        application mytv {

            # enable live streaming
            live on;

            # publish only from localhost
            allow publish 127.0.0.1;
            # allow publish all;
            # deny publish all;

            allow play all;

            # Turn on HLS
            hls on;
            hls_path /srv/nginx/stream/hls/;
            hls_fragment 3;
            hls_playlist_length 60;
            # disable consuming the stream from nginx as rtmp
            deny play all;

            # Use HLS encryption
            hls_keys on;

            # Store auto-generated keys in this location rather than hls_path
            hls_key_path /srv/nginx/keys;

            # Prepend key url with this value
            hls_key_url /keys/;

            # Change HLS key every 2 fragments
            hls_fragments_per_key 2;

            # record stream
            # https://github.com/arut/nginx-rtmp-module/wiki/Directives#record

            record all;
            record_path /srv/nginx/stream/record;

            # lock current record
            record_lock on;

            # add date time suffix to record file
            record_suffix -%%d-%%b-%%y-%%H-%%M.flv;

            # interval to create a new record file
            # record_interval 15m;
            record_interval 30s;

            # convert recorded file to mp4 format
            # & remove record without motion
            exec_record_done /usr/local/nginx/conf/after_record.sh -p $path -d $dirname -b $basename;
        }

    }
}